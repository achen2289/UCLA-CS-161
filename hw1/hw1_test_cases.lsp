(defun test-TREE-CONTAINS()
  (and
    (TREE-CONTAINS 3 '3)
    (TREE-CONTAINS 3 '((1 2 3) 7 8))
    (not (TREE-CONTAINS 4 '((1 2 3) 7 8)))
    (TREE-CONTAINS 4 '((1 3) 4 5))
    (not (TREE-CONTAINS 6 '((1 3) 4 5)))
    (not (TREE-CONTAINS 9 '()))
    (TREE-CONTAINS 8 '(() 8 ()))
    (not (TREE-CONTAINS 5 '(((0 1 2) 4 ()) 8 (9 10 11))))
    (TREE-CONTAINS 11 '(((0 1 2) 4 ()) 8 (9 10 11)))
    (TREE-CONTAINS 11 '((1 2 3) 5 (6 8 (9 10 (11 12 13)))))
    (TREE-CONTAINS 12 '((1 2 3) 5 (6 8 (9 10 (11 12 13)))))
    (TREE-CONTAINS 13 '((1 2 3) 5 (6 8 (9 10 (11 12 13)))))
    (TREE-CONTAINS 10 '((1 2 3) 5 (6 8 (9 10 (11 12 13)))))
    (TREE-CONTAINS 9 '((1 2 3) 5 (6 8 (9 10 (11 12 13)))))
    (TREE-CONTAINS 3 '((1 2 3) 5 (6 8 (9 10 (11 12 13)))))
    (TREE-CONTAINS 5 '((1 2 3) 5 (6 8 (9 10 (11 12 13)))))
    (TREE-CONTAINS 13 '(((1 2) 3 (4 5)) 6 ((7 8) 9 (10 11) 12 (13 14))))
    (not (TREE-CONTAINS 3 '(4)))
    (not (TREE-CONTAINS 3 '()))
  )
)

(defun test-TREE-MAX()
  (and
      (= 5 (TREE-MAX 5))
      (= 8 (TREE-MAX '((1 2 3) 7 8)))
      (= 3 (TREE-MAX '(0 1 3)))
      (= 4 (TREE-MAX '(0 1 (2 3 4))))
      (= 8 (TREE-MAX '((1 2 3) 4 (6 7 8))))
      (= 13 (TREE-MAX '((1 2 3) 5 (6 8 (9 10 (11 12 13))))))
      (not (TREE-MAX '()))
  )
)

(defun test-TREE-ORDER()
  (and 
    (equal '(1 3 2 8 7) (TREE-ORDER '((1 2 3) 7 8)))
    (equal '(1 3 2) (TREE-ORDER '(1 2 3)))
    (equal '(1 3 8 7 2) (TREE-ORDER '(1 2 (3 7 8))))
    (equal '(3) (TREE-ORDER 3))
    (equal '(1 3 2 5 7 6 4) (TREE-ORDER '((1 2 3) 4 (5 6 7))))
    (equal '(1 3 5 4 2 10 12 11 14 13 9) (TREE-ORDER '((1 2 (3 4 5)) 9 ((10 11 12) 13 14))))
  )
)

(defun test-SUB-LIST()
  (and 
    (equal '((a b) c) (SUB-LIST '((a b) c d) 0 2))
    (equal '(a b c) (SUB-LIST '(a b c d) 0 3))
    (equal '(d) (SUB-LIST '(a b c d) 3 1))
    (equal '(c d) (SUB-LIST '(a b c d) 2 2))
    (equal '(c d) (SUB-LIST '(a b c d) 2 3))
    (equal nil (SUB-LIST '(a b c d) 2 0))
    (equal nil (SUB-LIST '(a b c d) 0 0))
    (equal nil (SUB-LIST '(a b c d) 4 0))
    (equal nil (SUB-LIST '(a d) 4 4))
    (equal nil (SUB-LIST '() 2 3))
  )
)

(defun test-SPLIT-LIST()
  (and 
    (equal '(((a e) b) (c d)) (SPLIT-LIST '((a e) b c d)))
    (equal '((a b) (c d)) (SPLIT-LIST '(a b c d)))
    (equal '((a b) (c)) (SPLIT-LIST '(a b c)))
    (equal '((a) (b)) (SPLIT-LIST '(a b)))
    (equal '((a) nil) (SPLIT-LIST '(a)))
    (equal '(nil nil) (SPLIT-LIST '()))
  )
)

(defun test-BTREE-HEIGHT()
  (and
    (= 3 (BTREE-HEIGHT '(((1 2) (3 4)) ((5 6) (7 8)))))
    (= 3 (BTREE-HEIGHT '((1 (3 4)) ((5 6) (7 8)))))
    (= 0 (BTREE-HEIGHT 1)) 
    (= 1 (BTREE-HEIGHT '(1 2))) 
    (= 2 (BTREE-HEIGHT '(1 (2 3))))
    (= 2 (BTREE-HEIGHT '((1 2) (3 4)))) 
  )
)

(defun test-LIST2BTREE()
  (and 
    (equal '(((1 2) (3 4)) ((5 6) 7)) (LIST2BTREE '(1 2 3 4 5 6 7)))
    (equal (LIST2BTREE '(1 2 3 4 5 6 7 8)) '(((1 2) (3 4)) ((5 6) (7 8))))
    (equal (LIST2BTREE '(1)) 1)
    (equal (LIST2BTREE '(1 2)) '(1 2))
    (equal (LIST2BTREE '(1 2 3)) '((1 2) 3))
    (equal (LIST2BTREE '(1 2 3 4)) '((1 2) (3 4)))
  )
)

(defun test-BTREE2LIST()
  (and 
    (equal '(1 2 3 4 5 6 7) (BTREE2LIST '(((1 2) (3 4)) ((5 6) 7))))
    (equal '(1 2 3 4 5 6 7 8) (BTREE2LIST '(((1 2) (3 4)) ((5 6) (7 8)))))
    (equal '(1) (BTREE2LIST 1))
    (equal '(1 2) (BTREE2LIST '(1 2)))
    (equal '(1 2 3) (BTREE2LIST '((1 2) 3)))
    (equal '(1 2 3 4) (BTREE2LIST '((1 2) (3 4))))
  )
)

(defun test-IS-SAME()
  (and
    (equal T (IS-SAME '((1 2 3) 7 8) '((1 2 3) 7 8)))
    (equal NIL (IS-SAME '(1 2 3 7 8) '((1 2 3) 7 8)))
    (equal T (IS-SAME 8 8))
    (equal T (IS-SAME '() '()))
    (equal T (IS-SAME nil nil))
    (equal T (IS-SAME nil '()))
    (equal nil (IS-SAME '(nil) '()))
    (equal T (IS-SAME '((1 2 3) 4 (5 6 (7 8 9) (9 10))) '((1 2 3) 4 (5 6 (7 8 9) (9 10)))))
    (equal nil (IS-SAME '((1 2 3) 4 (5 6 (7 8 9) (9 10))) '((1 2 3) 4 (5 6 (7 8 9) 9 10))))
  )
)

(defun test-FLATTEN-APPEND()
  (and
    (equal '(0 1) (FLATTEN-APPEND '(0 1) NIL))
    (equal '(0 1 2) (FLATTEN-APPEND '(0 1) '2))
    (equal '(0 1 2 3 4 5 6) (FLATTEN-APPEND '(0 1) '(2 (3 4) 5 6)))
    (equal '(0 (1 (2 3)) 4 5 6 7) (FLATTEN-APPEND '(0 (1 (2 3)) 4) '(5 (6) 7)))
    (equal '(1 2 3 4 5 6 7 8) (FLATTEN-APPEND NIL '(1 2 ((3) 4) 5 (6 7) 8)))
  )
)

(defun test-all()
  (and
    t
    (test-TREE-CONTAINS)
    (test-TREE-MAX)
    (test-TREE-ORDER)
    (test-SUB-LIST)
    (test-SPLIT-LIST)
    (test-BTREE-HEIGHT)
    (test-LIST2BTREE)
    (test-BTREE2LIST)
    (test-IS-SAME)
    (test-FLATTEN-APPEND)
  )
)

(if (test-all) (print "Passed all") (print "Failed"))